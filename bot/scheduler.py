# file: bot/scheduler.py

import asyncio
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from bot.db.database import async_session_factory
from bot.db.models import Project, StatusEnum
from sqlalchemy import select

# --- –ó–ê–î–ê–ß–ê 1: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ê–ö–¢–ò–í–ù–´–ú –ø—Ä–æ–µ–∫—Ç–∞–º ---
async def check_active_projects(bot: Bot):
    print(f"[{datetime.now()}] Running ACTIVE projects reminder check...")
    async with async_session_factory() as session:
        query = select(Project).where(
            Project.status == StatusEnum.ACTIVE,
            Project.reminder_interval_days.is_not(None)
        )
        projects_to_check = (await session.execute(query)).scalars().all()

        for project in projects_to_check:
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è - —ç—Ç–æ —Ç–æ–∂–µ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º max –∏–∑ created_at –∏ last_reminded_at
            last_event_time = project.last_reminded_at or project.created_at
            
            if datetime.now() > last_event_time + timedelta(days=project.reminder_interval_days):
                from bot.config import settings
                from bot.handlers.project_manager.keyboards import get_project_card_keyboard
                
                user_id = settings.telegram_user_id
                notion_url = f"https://www.notion.so/{project.notion_page_id.replace('-', '')}" if project.notion_page_id else None
                
                text = (
                    f"üëã **–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º**\n"
                    f"**'{project.name}'**?\n\n"
                    "–ù–µ –∑–∞–±—ã–≤–∞–π –æ —Å—Ä–æ–∫–∞—Ö! üòâ"
                )
                
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=text,
                        reply_markup=get_project_card_keyboard(project.id, project.status.value, notion_url)
                    )
                    project.last_reminded_at = datetime.now()
                    await session.commit()
                    print(f"Sent reminder for active project '{project.name}'")
                except Exception as e:
                    print(f"Failed to send reminder for active project '{project.name}': {e}")


# --- –ó–ê–î–ê–ßA 2: –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ò–î–ï–ô –∏ –ê–ö–¢–ò–í–ù–û–°–¢–ò ---
async def weekly_idea_check(bot: Bot):
    print(f"[{datetime.now()}] Running WEEKLY idea check...")
    async with async_session_factory() as session:
        from bot.config import settings
        user_id = settings.telegram_user_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        one_week_ago = datetime.now() - timedelta(days=7)
        query = select(Project).where(Project.created_at >= one_week_ago)
        recent_projects_count = len((await session.execute(query)).scalars().all())

        builder = InlineKeyboardBuilder()
        if recent_projects_count == 0:
            text = "ü§î –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö –∏–¥–µ–π... –ü–æ—Ä–∞ —à—Ç—É—Ä–º–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã! –ú–æ–∂–µ—Ç, –¥–æ–±–∞–≤–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å?"
            builder.row(InlineKeyboardButton(text="üí° –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é!", callback_data="add_project_idea"))
        else:
            text = "‚ú® **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –∏–¥–µ–π!**\n\n–ù–µ —Ö–æ—á–µ—à—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π? –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º –∑–∞—Ç–∞–∏–ª—Å—è —Ç–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–µ–¥–µ–≤—Ä!"
            builder.row(InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–¥–µ–π", callback_data="list_idea_projects"))
        
        # –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        builder.row(InlineKeyboardButton(text="–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞", callback_data="remind_me_tomorrow_ideas")) # –∑–∞–≥–ª—É—à–∫–∞
        
        try:
            await bot.send_message(chat_id=user_id, text=text, reply_markup=builder.as_markup())
        except Exception as e:
            print(f"Failed to send weekly digest: {e}")


def setup_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    
    # –ó–∞–¥–∞—á–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤
    scheduler.add_job(check_active_projects, 'interval', hours=6)
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
    scheduler.add_job(weekly_idea_check, 'cron', day_of_week='mon', hour=10)

    scheduler.start()
    print("Scheduler with new logic started.")