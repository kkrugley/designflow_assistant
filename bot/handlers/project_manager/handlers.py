# file: bot/handlers/project_manager/handlers.py

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.utils.media_group import MediaGroupBuilder # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º FSM, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º–æ–¥–µ–ª–∏, —Å–µ—Ä–≤–∏—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
from .fsm import AddProjectIdea, ActivateProject
from .keyboards import (
    get_project_manager_keyboard, 
    get_reminder_keyboard, 
    get_project_card_keyboard,
    get_moodboard_choice_keyboard
)
from bot.db.models import StatusEnum, Project
from bot.db.database import (
    create_project_idea, 
    update_project_after_creation, 
    get_projects_by_status,
    get_project_by_id,
    update_project_status,
    delete_project
)
from bot.services.notion_service import notion_service
from bot.services.fal_service import generate_moodboard


router = Router()

# =============================================================================
# --- –°–¶–ï–ù–ê–†–ò–ô –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –ò–î–ï–ò (–£–ü–†–û–©–ï–ù–ù–´–ô) ---
# =============================================================================

@router.callback_query(F.data == "add_project_idea")
async def add_project_idea_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –∏–¥–µ–∏.")
    await state.set_state(AddProjectIdea.waiting_for_name)

@router.message(AddProjectIdea.waiting_for_name, F.text)
async def process_project_name(message: Message, state: FSMContext):
    await state.update_data(project_name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏.")
    await state.set_state(AddProjectIdea.waiting_for_description)

@router.message(AddProjectIdea.waiting_for_description, F.text)
async def process_project_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º—É–¥–±–æ—Ä–¥?",
        reply_markup=get_moodboard_choice_keyboard()
    )
    await state.set_state(AddProjectIdea.waiting_for_moodboard_choice)

@router.callback_query(AddProjectIdea.waiting_for_moodboard_choice, F.data.startswith("moodboard_"))
async def process_moodboard_choice_and_finish(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    if callback.data == "moodboard_yes":
        await callback.message.edit_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—É–¥–±–æ—Ä–¥... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
        user_data = await state.get_data()
        image_urls = await generate_moodboard(user_data.get("description"))
        
        if image_urls:
            media_group = MediaGroupBuilder(caption="–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π:")
            for url in image_urls:
                media_group.add(type="photo", media=url)
            await callback.message.answer_media_group(media=media_group.build())
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–¥–±–æ—Ä–¥.")

    # --- –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–¶–ï–ù–ê–†–ò–Ø ---
    user_data = await state.get_data()
    project_name = user_data.get("project_name")
    description = user_data.get("description")
    
    new_project = await create_project_idea(name=project_name, description=description)
    
    notion_result = await notion_service.create_project_page(
        name=project_name, status=StatusEnum.IDEA.value, description=description
    )
    
    if not notion_result:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion. –ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –±–æ—Ç–µ.")
    else:
        notion_page_id, notion_url = notion_result
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID Notion, –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await update_project_after_creation(project_id=new_project.id, notion_page_id=notion_page_id, reminder_interval=0)
        await callback.message.edit_text(f"‚úÖ –ò–¥–µ—è '{project_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ Notion: {notion_url}")

    await state.clear()
    await callback.message.answer("–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?", reply_markup=get_project_manager_keyboard())


# =============================================================================
# --- –°–¶–ï–ù–ê–†–ò–ô –ê–ö–¢–ò–í–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê ---
# =============================================================================

@router.callback_query(F.data.startswith("activate_project_"))
async def activate_project_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    project_id = int(callback.data.split("_")[2])
    await state.update_data(project_id=project_id)
    
    await callback.answer()
    await callback.message.edit_text(
        "üöÄ –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ö–∞–∫ —á–∞—Å—Ç–æ –º–Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
        reply_markup=get_reminder_keyboard()
    )
    await state.set_state(ActivateProject.waiting_for_reminder)

@router.callback_query(ActivateProject.waiting_for_reminder, F.data.startswith("remind_"))
async def process_activation_reminder(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ –ë–î –∏ Notion, –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    await callback.answer()
    interval = int(callback.data.split("_")[1])
    user_data = await state.get_data()
    project_id = user_data.get("project_id")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
    project = await update_project_status(project_id, StatusEnum.ACTIVE)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î
    if project:
        await update_project_after_creation(project.id, project.notion_page_id, interval)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Notion
    if project and project.notion_page_id:
        await notion_service.update_page_status(project.notion_page_id, StatusEnum.ACTIVE.value)
    
    await callback.message.edit_text("‚úÖ –ü—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!", reply_markup=get_project_manager_keyboard())
    await state.clear()


# =============================================================================
# --- –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–û–í –ò –ö–ê–†–¢–û–ß–ï–ö –ü–†–û–ï–ö–¢–û–í (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# =============================================================================
@router.callback_query(F.data.in_({"list_idea_projects", "list_active_projects", "list_archived_projects"}))
async def list_projects_by_status_handler(callback: CallbackQuery):
    status_map = {
        "list_idea_projects": (StatusEnum.IDEA, "üí° –°–ø–∏—Å–æ–∫ –∏–¥–µ–π"),
        "list_active_projects": (StatusEnum.ACTIVE, "‚ö°Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"),
        "list_archived_projects": (StatusEnum.ARCHIVED, "üóÑ –ê—Ä—Ö–∏–≤")
    }
    status_enum, title = status_map[callback.data]
    projects = await get_projects_by_status(status_enum)
    await callback.answer()

    list_builder = InlineKeyboardBuilder()
    if projects:
        for p in projects:
            list_builder.row(InlineKeyboardButton(text=p.name, callback_data=f"show_project_{p.id}"))
    
    list_builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="project_manager"))
    
    text = f"**{title}**:" if projects else f"–°–ø–∏—Å–æ–∫ '{title}' –ø–æ–∫–∞ –ø—É—Å—Ç."
    await callback.message.edit_text(text, reply_markup=list_builder.as_markup())

@router.callback_query(F.data.startswith("show_project_"))
async def show_project_card_handler(callback: CallbackQuery):
    project_id = int(callback.data.split("_")[2])
    project = await get_project_by_id(project_id)
    await callback.answer()

    if not project:
        await callback.message.edit_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_project_manager_keyboard())
        return
            
    notion_url = f"https://www.notion.so/{project.notion_page_id.replace('-', '')}" if project.notion_page_id else None
            
    card_text = (
        f"**–ü—Ä–æ–µ–∫—Ç: {project.name}**\n\n"
        f"–°—Ç–∞—Ç—É—Å: `{project.status.value}`\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n_{project.description}_"
    )
    
    await callback.message.edit_text(
        card_text,
        reply_markup=get_project_card_keyboard(project.id, project.status.value, notion_url),
        disable_web_page_preview=True
    )

# =============================================================================
# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–û–ú (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# =============================================================================
@router.callback_query(F.data.startswith(("complete_project_", "cancel_project_")))
async def archive_project_handler(callback: CallbackQuery):
    action, _, project_id_str = callback.data.partition("_project_")
    project_id = int(project_id_str)
    
    project = await update_project_status(project_id, StatusEnum.ARCHIVED)
    if project and project.notion_page_id:
        await notion_service.update_page_status(project.notion_page_id, StatusEnum.ARCHIVED.value)
            
    alert_text = "‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∞—Ä—Ö–∏–≤." if action == "complete" else "‚ùå –ü—Ä–æ–µ–∫—Ç –æ—Ç–º–µ–Ω–µ–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –∞—Ä—Ö–∏–≤."
    await callback.answer(alert_text, show_alert=True)
    await callback.message.edit_text("üóÇ **–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤**", reply_markup=get_project_manager_keyboard())

@router.callback_query(F.data.startswith("delete_project_"))
async def delete_project_handler(callback: CallbackQuery):
    project_id = int(callback.data.split("_")[2])
    project = await get_project_by_id(project_id)
    
    if project and project.notion_page_id:
        await notion_service.archive_page(project.notion_page_id)
        
    await delete_project(project_id)
    await callback.answer("üóë –ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
    await callback.message.edit_text("üóÇ **–ú–µ–Ω–µ–¥–∂–µ—Ä –ü—Ä–æ–µ–∫—Ç–æ–≤**", reply_markup=get_project_manager_keyboard())